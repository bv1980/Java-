/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package techie;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 *
 * @author Bhaskar's PC
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ContactManagerTest {
    
    ContactManager contactManager;
}
    
    
    @BeforeAll
    public void setupAll(){
        System.out.println("Should print before all tests");
    }
    
    @BeforeEach
    public void setup(){
        contactManager = new ContactManager();
    }
    
    
    @Test
    public void shouldCreateContact(){
        
        
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber = "0123456789");
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals("0123456789")))
                .findAny()
                .isPresent();
        
    }
    
    @Test
    @DisplayName("Should not create contact when first name is null")
    public void shouldThrowRuntimeExceptionWhenFirstNameIsNull(){
        
        Assertions.assertThrows(RuntimeException.class, () -> {
            contactManager.addContact(firstName: null, lastName: "Andrews", phoneNumber: "0123456789"))
        });
    }
    
    @Test
    @DisplayName("Should not create contact when last name is null")
    public void shouldThrowRuntimeExceptionWhenFirstNameIsNull(){
        
        Assertions.assertThrows(RuntimeException.class, () -> {
            contactManager.addContact(firstName: "John", lastName: null, phoneNumber: "0123456789"))
        });
    }
        
    @Test
    @DisplayName("Should not create contact when phone number is null")
    public void shouldThrowRuntimeExceptionWhenFirstNameIsNull(){
        
        Assertions.assertThrows(RuntimeException.class, () -> {
            contactManager.addContact(firstName: "John", lastName: "Andrews", phoneNumber: null))
        });
    }

    @AfterEach
    public void tearDown(){

    System.out.println("Should execute after each test");
    }

    @AfterAll
    public void tearDownAll(){

    System.out.println("Should be executed at the end of the test");
    }

    @Test
    @DisplayName("Should create contact only on MAC OS")
    @EnabledOnOs(value = OS.MAC, disabledReason = "Enabled only on MAC OS")
    public void shouldCreateContactOnlyOnMAC(){
        
        
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber = "0123456789");
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals("0123456789")))
                .findAny()
                .isPresent();
        
    }

     @Test
    @DisplayName("Should create contact only on MAC OS")
    @DisabledOnOs(value = OS.MAC, disabledReason = "Disabled on Windows OS")
    public void shouldNotCreateContactOnlyOnWindows(){
        
        
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber = "0123456789");
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals("0123456789")))
                .findAny()
                .isPresent();
    
}

    @Test
    @DisplayName("Test Contact Creation on Developer Machine")
    public void shouldTestContactCreationOnDEV{
        
        Assumption.assumeTrue("DEV".equals(System.getProperty("ENV")));
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber = "0123456789");
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals("0123456789")))
                .findAny()
                .isPresent();
    
}

    
@Nested
class RepeatedNestedTest{
    
     @DisplayName("Test Contact Creation on Developer Machine")
    @RepeatedTest(value = 5, name = "Repeating Contact Creation Test {currentRepetition} of {totalRepetitions}")
    public void shouldTestContactCreationRepeatedly{
        
        Assumption.assumeTrue("DEV".equals(System.getProperty("ENV")));
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber = "0123456789");
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals("0123456789")))
                .findAny()
                .isPresent();
    
}

        @DisplayName("Repeat Contact Creation Test 5 Times")
    @RepeatedTest(value = 5, name = "Repeating Contact Creation Test {currentRepetition} of {totalRepetitions}")
    @ValueSource(strings = {"0123456789","0123456789","0123456789"})
    public void shouldTestContactCreationUsingValueSource(String phoneNumber){
        
        Assumption.assumeTrue("DEV".equals(System.getProperty("ENV")));
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber);
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals(phoneNumber)))
                .findAny()
                .isPresent();
    
}
}
    
private static List<String> phoneNumberList(){
    
    return Arrays.asList("0123456789","0123456789","0123456789")
}


@Nested
class ParameterizedNestedTest{

     @DisplayName("Method Source Case - Phone Number Should Match The Required Format")
    @RepeatedTest(value = 5, name = "Repeating Contact Creation Test {currentRepetition} of {totalRepetitions}")
    @ParameterizedTest
    @MethodSource("phoneNumberList")
    public void shouldTestPhoneNumberFormatUsingMethodSource(String phoneNumber){
        
        Assumption.assumeTrue("DEV".equals(System.getProperty("ENV")));
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber);
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals(phoneNumber)))
                .findAny()
                .isPresent();
    
}

    


    @DisplayName("CSV Source Case - Phone Number Should Match The Required Format ")
    @RepeatedTest(value = 5, name = "Repeating Contact Creation Test {currentRepetition} of {totalRepetitions}")
    @ParameterizedTest
    @CSVSource({"0123456789","0123456789","0123456789"})
    public void shouldTestPhoneNumberFormatUsingCSVSource(String phoneNumber){
        
        Assumption.assumeTrue("DEV".equals(System.getProperty("ENV")));
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber);
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals(phoneNumber)))
                .findAny()
                .isPresent();
    
}

   @DisplayName("CSV File Source Case - Phone Number Should Match The Required Format ")
    @RepeatedTest(value = 5, name = "Repeating Contact Creation Test {currentRepetition} of {totalRepetitions}")
    @ParameterizedTest
    @CSVFileSource(resources = "/data.csv")
    public void shouldTestPhoneNumberFormatUsingCSVFileSource(String phoneNumber){
        
        Assumption.assumeTrue("DEV".equals(System.getProperty("ENV")));
        contactManager.addContact(firstName = "John", lastName = "Andrews", phoneNumber);
        Assertions.assertFalse(contactManager.getAllContacts().isEmpty());
        Assertions.assertEquals(expected : 1, contactManager.getAllContacts().size());
        Assertions.assertTrue(contactManager.getAllContacts().stream()
        .filter(contact -> contact.getFirstName().equals("John") &&
                contact.getLastName().equals("Andrews") &&
                contact.getPhoneNumber().equals(phoneNumber)))
                .findAny()
                .isPresent();
    
}
}
    

